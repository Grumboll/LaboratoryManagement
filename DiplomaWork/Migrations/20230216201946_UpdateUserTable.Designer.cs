// <auto-generated />
using System;
using DiplomaWork.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiplomaWork.Migrations
{
    [DbContext(typeof(laboratory_2023Context))]
    [Migration("20230216201946_UpdateUserTable")]
    partial class UpdateUserTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryDay", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime")
                        .HasColumnName("day");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("laboratory_day", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryDayHasProfile", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("CreatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<float?>("KilogramsPerMeter")
                        .HasColumnType("float unsigned")
                        .HasColumnName("kilograms_per_meter");

                    b.Property<uint>("LaboratoryDayId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("laboratory_day_id");

                    b.Property<float>("MetersSquaredPerSample")
                        .HasColumnType("float unsigned")
                        .HasColumnName("meters_squared_per_sample");

                    b.Property<float>("PaintedMetersSquared")
                        .HasColumnType("float unsigned")
                        .HasColumnName("painted_meters_squared");

                    b.Property<uint>("PaintedSamplesCount")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("painted_samples_count");

                    b.Property<uint>("ProfileId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("profile_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("UpdatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_users_laboratory_day_profile1_idx");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_users_laboratory_day_profile2_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE1");

                    b.HasIndex(new[] { "LaboratoryDayId" }, "laboratory_day_id_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "ProfileId" }, "profile_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("laboratory_day_has_profile", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryMonth", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("Month")
                        .HasColumnType("int(5) unsigned")
                        .HasColumnName("month");

                    b.Property<uint>("Year")
                        .HasColumnType("int(5) unsigned")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE2");

                    b.ToTable("laboratory_month", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryMonthHasDay", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<float?>("Kilograms")
                        .HasColumnType("float unsigned")
                        .HasColumnName("kilograms");

                    b.Property<uint>("LaboratoryDayId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("laboratory_day_id");

                    b.Property<uint>("LaboratoryMonthId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("laboratory_month_id");

                    b.Property<float>("MetersSquared")
                        .HasColumnType("float unsigned")
                        .HasColumnName("meters_squared");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE3");

                    b.HasIndex(new[] { "LaboratoryDayId" }, "laboratory_day_id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("laboratory_day_id_UNIQUE1");

                    b.HasIndex(new[] { "LaboratoryMonthId" }, "laboratory_month_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("laboratory_month_has_day", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryMonthHasDayHasChemical", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("CreatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<float>("ExpensePerMeterSquared")
                        .HasColumnType("float unsigned")
                        .HasColumnName("expense_per_meter_squared");

                    b.Property<uint>("LaboratoryMonthHasDayId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("laboratory_month_has_day_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("UpdatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_users_laboratory_month_chemicals1_idx");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_users_laboratory_month_chemicals2_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE4");

                    b.HasIndex(new[] { "LaboratoryMonthHasDayId" }, "laboratory_month_has_day_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("laboratory_month_has_day_has_chemicals", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.Permission", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("slug");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE5");

                    b.HasIndex(new[] { "Slug" }, "slug_UNIQUE")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.Profile", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("CreatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("UpdatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_users_profile1_idx");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_users_profile2_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE6");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.ProfileHasLengthsPerimeter", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<float?>("Length")
                        .HasColumnType("float unsigned")
                        .HasColumnName("length");

                    b.Property<float?>("Perimeter")
                        .HasColumnType("float unsigned")
                        .HasColumnName("perimeter");

                    b.Property<uint>("ProfileId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("profile_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProfileId" }, "fk_profile_profile_has_lengths_perimeter_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE7");

                    b.ToTable("profile_has_lengths_perimeter", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.Role", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("slug");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE8");

                    b.HasIndex(new[] { "Slug" }, "slug_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("slug_UNIQUE1");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.RoleHasPermission", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("PermissionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("permission_id");

                    b.Property<uint>("RoleId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PermissionId" }, "fk_permissions_role_has_permissions_idx");

                    b.HasIndex(new[] { "RoleId" }, "fk_roles_role_has_permissions_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE9");

                    b.ToTable("role_has_permissions", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.User", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("CreatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_locked");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("UpdatedBy")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedBy" }, "fk_users_users1_idx");

                    b.HasIndex(new[] { "UpdatedBy" }, "fk_users_users2_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE10");

                    b.HasIndex(new[] { "Username" }, "username_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.UserHasRole", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("RoleId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("role_id");

                    b.Property<uint>("UserId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "fk_roles_user_has_roles_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_users_user_has_roles_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE11");

                    b.ToTable("user_has_roles", (string)null);
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryDayHasProfile", b =>
                {
                    b.HasOne("DiplomaWork.Models.User", "CreatedByNavigation")
                        .WithMany("LaboratoryDayHasProfileCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_laboratory_day_profile1");

                    b.HasOne("DiplomaWork.Models.Profile", "Profile")
                        .WithOne("LaboratoryDayHasProfile")
                        .HasForeignKey("DiplomaWork.Models.LaboratoryDayHasProfile", "ProfileId")
                        .IsRequired()
                        .HasConstraintName("fk_profile_laboratory_day_has_profile");

                    b.HasOne("DiplomaWork.Models.User", "UpdatedByNavigation")
                        .WithMany("LaboratoryDayHasProfileUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_laboratory_day_profile2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Profile");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryMonthHasDay", b =>
                {
                    b.HasOne("DiplomaWork.Models.LaboratoryDay", "LaboratoryDay")
                        .WithOne("LaboratoryMonthHasDay")
                        .HasForeignKey("DiplomaWork.Models.LaboratoryMonthHasDay", "LaboratoryDayId")
                        .IsRequired()
                        .HasConstraintName("fk_laboratory_day_laboratory_month_has_day");

                    b.HasOne("DiplomaWork.Models.LaboratoryMonth", "LaboratoryMonth")
                        .WithOne("LaboratoryMonthHasDay")
                        .HasForeignKey("DiplomaWork.Models.LaboratoryMonthHasDay", "LaboratoryMonthId")
                        .IsRequired()
                        .HasConstraintName("fk_laboratory_month_laboratory_month_has_day");

                    b.Navigation("LaboratoryDay");

                    b.Navigation("LaboratoryMonth");
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryMonthHasDayHasChemical", b =>
                {
                    b.HasOne("DiplomaWork.Models.User", "CreatedByNavigation")
                        .WithMany("LaboratoryMonthHasDayHasChemicalCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_laboratory_month_chemicals1");

                    b.HasOne("DiplomaWork.Models.LaboratoryMonthHasDay", "LaboratoryMonthHasDay")
                        .WithOne("LaboratoryMonthHasDayHasChemical")
                        .HasForeignKey("DiplomaWork.Models.LaboratoryMonthHasDayHasChemical", "LaboratoryMonthHasDayId")
                        .IsRequired()
                        .HasConstraintName("fk_laboratory_month_has_day_laboratory_month_chemicals");

                    b.HasOne("DiplomaWork.Models.User", "UpdatedByNavigation")
                        .WithMany("LaboratoryMonthHasDayHasChemicalUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_laboratory_month_chemicals2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("LaboratoryMonthHasDay");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DiplomaWork.Models.Profile", b =>
                {
                    b.HasOne("DiplomaWork.Models.User", "CreatedByNavigation")
                        .WithMany("ProfileCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_profile1");

                    b.HasOne("DiplomaWork.Models.User", "UpdatedByNavigation")
                        .WithMany("ProfileUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_profile2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DiplomaWork.Models.ProfileHasLengthsPerimeter", b =>
                {
                    b.HasOne("DiplomaWork.Models.Profile", "Profile")
                        .WithMany("ProfileHasLengthsPerimeters")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("fk_profile_profile_has_lengths_perimeter");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DiplomaWork.Models.RoleHasPermission", b =>
                {
                    b.HasOne("DiplomaWork.Models.Permission", "Permission")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("fk_permissions_role_has_permissions");

                    b.HasOne("DiplomaWork.Models.Role", "Role")
                        .WithMany("RoleHasPermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_role_has_permissions");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiplomaWork.Models.User", b =>
                {
                    b.HasOne("DiplomaWork.Models.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_users1");

                    b.HasOne("DiplomaWork.Models.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("fk_users_users2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DiplomaWork.Models.UserHasRole", b =>
                {
                    b.HasOne("DiplomaWork.Models.Role", "Role")
                        .WithMany("UserHasRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_user_has_roles");

                    b.HasOne("DiplomaWork.Models.User", "User")
                        .WithMany("UserHasRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_users_user_has_roles");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryDay", b =>
                {
                    b.Navigation("LaboratoryMonthHasDay")
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryMonth", b =>
                {
                    b.Navigation("LaboratoryMonthHasDay")
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomaWork.Models.LaboratoryMonthHasDay", b =>
                {
                    b.Navigation("LaboratoryMonthHasDayHasChemical")
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomaWork.Models.Permission", b =>
                {
                    b.Navigation("RoleHasPermissions");
                });

            modelBuilder.Entity("DiplomaWork.Models.Profile", b =>
                {
                    b.Navigation("LaboratoryDayHasProfile")
                        .IsRequired();

                    b.Navigation("ProfileHasLengthsPerimeters");
                });

            modelBuilder.Entity("DiplomaWork.Models.Role", b =>
                {
                    b.Navigation("RoleHasPermissions");

                    b.Navigation("UserHasRoles");
                });

            modelBuilder.Entity("DiplomaWork.Models.User", b =>
                {
                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("LaboratoryDayHasProfileCreatedByNavigations");

                    b.Navigation("LaboratoryDayHasProfileUpdatedByNavigations");

                    b.Navigation("LaboratoryMonthHasDayHasChemicalCreatedByNavigations");

                    b.Navigation("LaboratoryMonthHasDayHasChemicalUpdatedByNavigations");

                    b.Navigation("ProfileCreatedByNavigations");

                    b.Navigation("ProfileUpdatedByNavigations");

                    b.Navigation("UserHasRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
